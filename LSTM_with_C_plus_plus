#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

class LSTM_Cell {
private:
    double input_gate_weight;
    double output_gate_weight;
    double forget_gate_weight;
    double cell_state;
    double hidden_state;

public:
    LSTM_Cell() {
        input_gate_weight = 0.5;
        output_gate_weight = 0.5;
        forget_gate_weight = 0.5;
        cell_state = 0.0;
        hidden_state = 0.0;
    }

    double sigmoid(double x) {
        return 1.0 / (1.0 + exp(-x));
    }

    double tanh(double x) {
        return (exp(x) - exp(-x)) / (exp(x) + exp(-x));
    }

    void forward_pass(double input) {
        double input_gate = sigmoid(input_gate_weight * input);
        double output_gate = sigmoid(output_gate_weight * input);
        double forget_gate = sigmoid(forget_gate_weight * input);

        cell_state = forget_gate * cell_state + input_gate * tanh(input);
        hidden_state = output_gate * tanh(cell_state);
    }

    double get_hidden_state() {
        return hidden_state;
    }
};

int main() {
    vector<double> input_sequence = {1.0, 2.0, 3.0, 4.0, 5.0};
    LSTM_Cell lstm_cell;

    for (int i = 0; i < input_sequence.size(); i++) {
        lstm_cell.forward_pass(input_sequence[i]);
        double output = lstm_cell.get_hidden_state();
        cout << "Input: " << input_sequence[i] << ", Output: " << output << endl;
    }

    return 0;
}
